@page "/Consultoria/Listar"

@using Microsoft.EntityFrameworkCore
@using Blazorise.DataGrid

@attribute [Authorize]

<ul class="breadcrumb">
    <li><a href="#">Home</a> <span class="divider">/</span></li>
    <li><a href="#">Consultoria</a> <span class="divider">/</span></li>
    <li class="active">Listar</li>
</ul>

<h1> I'M TRYING I SWEAR</h1>

<p> Give me a break for god sake </p>

<DataGrid TItem="Consultoria"
          Data="@Consultorias"
          ReadData="@OnReadData"
          TotalItems="@NumConsultorias"
          Sortable="true"
          Filterable="true"
          Editable="true"
          ShowPager="true"
          PageSize="15">
    <DataGridCommandColumn TItem="Consultoria">
        <NewCommandTemplate>
            <Button Color="Color.Success" @onclick="@(() => CriarNovaConsultoria = true)" Clicked="@context.Clicked">Novo</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Tooltip Text="Editar">
                <a href="/Consultoria/Detalhes/@context.Item.Id" class="btn btn-primary"><i class="fa fa-edit"></i></a>
            </Tooltip>
        </EditCommandTemplate>
        <DeleteCommandTemplate>
            <Tooltip Text="Eliminar">
                <Button Color="Color.Primary" @onclick="@(()=> InativarConsultoria(context.Item.Id))" Clicked="@context.Clicked"><i class="fa fa-trash-alt"></i></Button>
            </Tooltip>
        </DeleteCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn TItem="Consultoria" Field="@nameof(Consultoria.Nome)" Caption="Nome" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Consultoria" Field="@nameof(Consultoria.Descricao)" Caption="Descrição" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Consultoria" Field="@nameof(Consultoria.PrecoBase)" Caption="Preço" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Consultoria" Field="@nameof(Consultoria.Activo)" Caption="Activo" Editable="true">
        <DisplayTemplate>
            @if ((context as Consultoria)?.Activo == true)
            {
                <i class="fas fa-check-circle fa-2x text-success"></i>
            }
            else
            {
                <i class="fas fa-times-circle fa-2x text-danger"></i>
            }
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

<!-- Painel para adicionar nova Consultoria -->
@*<AdicionarConsultoria @bind-CriarNovaConsultoria="CriarNovaConsultoria"></AdicionarConsultoria>*@

@code {

    [Inject]
    public IDbContextFactory<AppDatabaseContext> ContextFactory { get; set; }

    [Inject]
    public IConsultoriaServico ConsultoriaServico { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IToastService ToastService { get; set; }

    protected bool CriarNovaConsultoria { get; set; }

    protected List<Consultoria> Consultorias;
    protected int NumConsultorias;

    //protected override async Task OnInitializedAsync()
    //{
    //    Consultorias = await Repository.ListAsync<Consultoria>();
    //    //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}

    protected async Task OnReadData(DataGridReadDataEventArgs<Consultoria> e)
    {
        // this can be call to anything, in this case we're calling a fictional api

        using (var context = ContextFactory.CreateDbContext())
        {
            Consultorias = await context.Consultoria
                .Skip((e.Page - 1) * e.PageSize)
                .Take(e.PageSize)
                .ToListAsync();

            NumConsultorias = Consultorias.Count; // this is used to tell datagrid how many items are available so that pagination will work
        }

        //($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        // always call StateHasChanged!
        StateHasChanged();
    }

    protected void InativarConsultoria(int Id)
    {
        ConsultoriaServico.InativarConsultoria(Id);
        ToastService.ShowSuccess("Consultoria inativado com sucesso");
    }

}