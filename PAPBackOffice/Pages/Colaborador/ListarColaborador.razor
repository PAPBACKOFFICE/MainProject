@page "/Colaborador/ListarColaborador"
@inject NavigationManager navigationManager
@inject IRepository Repository
@using Microsoft.EntityFrameworkCore

@using Blazorise.DataGrid

@inject IToastService toastService


<h3>ListarColaborador</h3>

<h1> I'M TRYING I SWEAR</h1>

<p> Give me a break for god sake </p>
@if (colaboradores == null)
{
    <p><em>A processar dados...</em></p>
}
else
{
    <DataGrid TItem="Colaborador"
              Data="@colaboradores"
              ReadData="@OnReadData"
              TotalItems="@NumColaboradores"
              Sortable="true"
              Filterable="true"
              Editable="true"
              ShowPager="true"
              PageSize="15">
        <DataGridCommandColumn TItem="Colaborador">
            <NewCommandTemplate>
                <Button Color="Color.Success" @onclick="@(()=> navigationManager.NavigateTo("/Colaborador/AdicionarColaborador"))" Clicked="@context.Clicked">Novo</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Tooltip Text="Editar">
                    <Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-edit"></i></Button>
                </Tooltip>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Tooltip Text="Eliminar">
                    <Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-trash-alt"></i></Button>
                </Tooltip>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="Colaborador" Field="@nameof(Colaborador.Nome)" Caption="Nome" Editable="true"></DataGridColumn>
       
    </DataGrid>
}

@code {
    private List<Colaborador> colaboradores;
    private int NumColaboradores;

    protected override async Task OnInitializedAsync()
    {
        colaboradores= await Repository.ListAsync<Colaborador>();
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    async Task OnReadData(DataGridReadDataEventArgs<Colaborador> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await Repository.Query<Colaborador>()
                .Skip(e.Page * e.PageSize)
                .Take(e.PageSize)
                .ToListAsync();

        //($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        colaboradores = response; // an actual data for the current page
        NumColaboradores = response.Count;
        // always call StateHasChanged!
        StateHasChanged();
    }
}