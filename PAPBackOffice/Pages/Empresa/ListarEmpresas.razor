@page "/Empresa/Listar"
@inject NavigationManager navigationManager
@inject IRepository Repository
@using Microsoft.EntityFrameworkCore

@using Blazorise.DataGrid

@inject IToastService toastService

<ul class="breadcrumb">
    <li><a href="#">Home</a> <span class="divider">/</span></li>
    <li><a href="#">Empresa</a> <span class="divider">/</span></li>
    <li class="active">Listar</li>
</ul>

<h1> I'M TRYING I SWEAR</h1>

<p> Give me a break for god sake </p>

<DataGrid TItem="Empresa"
          Data="@Empresas"
          ReadData="@OnReadData"
          TotalItems="@NumEmpresas"
          Sortable="true"
          Filterable="true"
          Editable="true"
          ShowPager="true"
          PageSize="15">
    <DataGridCommandColumn TItem="Empresa">
        <NewCommandTemplate>
            <Button Color="Color.Success" @onclick="@(() => CriarNovaEmpresa = true)" Clicked="@context.Clicked">Novo</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Tooltip Text="Editar">
                <Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-edit"></i></Button>
            </Tooltip>
        </EditCommandTemplate>
        <DeleteCommandTemplate>
            <Tooltip Text="Eliminar">
                <Button Color="Color.Primary" @onclick="@(()=> InativarEmpresa(context.Item.Id))" Clicked="@context.Clicked"><i class="fa fa-trash-alt"></i></Button>
            </Tooltip>
        </DeleteCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn TItem="Empresa" Field="@nameof(Empresa.Nome)" Caption="Nome" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Empresa" Field="@nameof(Empresa.NIF)" Caption="NIF" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Empresa" Field="@nameof(Empresa.Telefone)" Caption="Telefone" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Empresa" Field="@nameof(Empresa.Email)" Caption="Email" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Empresa" Field="@nameof(Empresa.Activo)" Caption="Activo" Editable="true">
        <DisplayTemplate>
            @if ((context as Empresa)?.Activo == true)
            {
                <i class="fas fa-check-circle fa-2x text-success"></i>
            }
            else
            {
                <i class="fas fa-times-circle fa-2x text-danger"></i>
            }
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

<!-- Painel para adicionar nova empresa -->
<AdicionarEmpresa @bind-CriarNovaEmpresa="CriarNovaEmpresa"></AdicionarEmpresa>

@code {

    [Inject]
    public IEmpresaServico EmpresaServico { get; set; }

    private bool CriarNovaEmpresa { get; set; }

    private List<Empresa> Empresas;
    private int NumEmpresas;

    //protected override async Task OnInitializedAsync()
    //{
    //    Empresas = await Repository.ListAsync<Empresa>();
    //    //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}

    async Task OnReadData(DataGridReadDataEventArgs<Empresa> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await Repository.Query<Empresa>()
                .Skip((e.Page - 1) * e.PageSize)
                .Take(e.PageSize)
                .ToListAsync();

        //($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        Empresas = response; // an actual data for the current page
        NumEmpresas = response.Count; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }

    protected void InativarEmpresa(int Id)
    {
        EmpresaServico.InativarEmpresa(Id);
        toastService.ShowSuccess("Empresa inativado com sucesso");
    }
}

