@page "/Utilizador/ListarUtilizador"
@inject NavigationManager navigationManager
@inject IRepository Repository
@using Microsoft.EntityFrameworkCore

@using Blazorise.DataGrid

@inject IToastService toastService


<h3>Listar utilizador</h3>

<h1> I'M TRYING I SWEAR</h1>

<p> Give me a break for god sake </p>
@if (utilizadores == null)
{
    <p><em>A processar dados...</em></p>
}
else
{
    <DataGrid TItem="Utilizador"
              Data="@utilizadores"
              ReadData="@OnReadData"
              TotalItems="@NumUtilizadores"
              Sortable="true"
              Filterable="true"
              Editable="true"
              ShowPager="true"
              PageSize="15">
        <DataGridCommandColumn TItem="Utilizador">
            <NewCommandTemplate>
                <Button Color="Color.Success" @onclick="@(()=> navigationManager.NavigateTo("/Utilizador/ListarUtilizador"))" Clicked="@context.Clicked">Novo</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Tooltip Text="Editar">
                    <Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-edit"></i></Button>
                </Tooltip>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Tooltip Text="Eliminar">
                    <Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-trash-alt"></i></Button>
                </Tooltip>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="Utilizador" Field="@nameof(Utilizador.Nome)" Caption="Nome" Editable="true"></DataGridColumn>

    </DataGrid>
}

@code {
    private List<Utilizador> utilizadores;
    private int NumUtilizadores;

    protected override async Task OnInitializedAsync()
    {
        utilizadores = await Repository.ListAsync<Utilizador>();
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    async Task OnReadData(DataGridReadDataEventArgs<Utilizador> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await Repository.Query<Utilizador>()
                .Skip(e.Page * e.PageSize)
                .Take(e.PageSize)
                .ToListAsync();

        //($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        utilizadores = response; // an actual data for the current page
        NumUtilizadores = response.Count;
        // always call StateHasChanged!
        StateHasChanged();
    }
}