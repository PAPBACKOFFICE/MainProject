@page "/Pedido/Listar"

@attribute [Authorize]

@using Microsoft.EntityFrameworkCore
@using Blazorise.DataGrid

<h1> Pedidos -Clientes </h1>

<DataGrid TItem="Pedido"
          Data="@Pedidos"
          ReadData="@OnReadData"
          TotalItems="@NumPedidos"
          Sortable="true"
          Filterable="true"
          Editable="true"
          ShowPager="true"
          PageSize="15">
    <DataGridCommandColumn TItem="Pedido">
        <NewCommandTemplate>
            <Button Color="Color.Success" @onclick="@(() => CriarNovoPedido = true)" Clicked="@context.Clicked">Novo</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Tooltip Text="Editar">
                <!--Button Color="Color.Primary" Clicked="@context.Clicked"><i class="fa fa-edit"></i></!--Button-->
                <a href="/Pedidos/Detalhes/@context.Item.Id" class="btn btn-primary"><i class="fa fa-edit"></i></a>
            </Tooltip>
        </EditCommandTemplate>
        <DeleteCommandTemplate>
            <Tooltip Text="Eliminar">
                <Button Color="Color.Primary" @onclick="@(()=> InativarPedido(context.Item.Id))" Clicked="@context.Clicked"><i class="fa fa-trash-alt"></i></Button>
            </Tooltip>
        </DeleteCommandTemplate>
    </DataGridCommandColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.Assunto)" Caption="Assunto" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.Empresa)" Caption="Empresa" Editable="true">
        <DisplayTemplate>
            @if ((context as Pedido)?.Empresa != null)
            {
                @context.Empresa.Nome
            }
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.Colaborador)" Caption="Colaborador" Editable="true">
        <DisplayTemplate>
            @if ((context as Pedido)?.Colaborador != null)
            {
                @context.Colaborador.Nome
            }
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.CriadoEm)" Caption="Criado Em" Editable="true"></DataGridColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.PedidoEstado)" Caption="Estado" Editable="true">
        <DisplayTemplate>
            @if ((context as Pedido)?.PedidoEstado != null)
            {
                @context.PedidoEstado.Nome
            }
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn TItem="Pedido" Field="@nameof(Pedido.PedidoPrioridade)" Caption="Prioridade" Editable="true">
        <DisplayTemplate>
            @if ((context as Pedido)?.PedidoPrioridade != null)
            {
                @context.PedidoPrioridade.Nome
            }

        </DisplayTemplate>
    </DataGridColumn>
    
</DataGrid>

<!-- Painel para adicionar nova Pedido -->
<AdicionarPedido @bind-CriarNovoPedido="CriarNovoPedido" EmpresaId="0"></AdicionarPedido>

@code {

    [Inject]
    public IDbContextFactory<AppDatabaseContext> ContextFactory { get; set; }

    [Inject]
    public IPedidoServico PedidoServico { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IToastService ToastService { get; set; }

    [Parameter]
    public int EmpresaId { get; set; }

    protected bool CriarNovoPedido { get; set; }

    protected List<Pedido> Pedidos;
    protected int NumPedidos;

    //protected override async Task OnInitializedAsync()
    //{
    //    Pedidos = await Repository.ListAsync<Pedido>();
    //    //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    //}

    protected async Task OnReadData(DataGridReadDataEventArgs<Pedido> e)
    {
        // this can be call to anything, in this case we're calling a fictional api

        using (var context = ContextFactory.CreateDbContext())
        {
            var query = context.Pedido.AsQueryable();

            if (EmpresaId != 0)
                query = query.Where(m => m.EmpresaId == EmpresaId);

            Pedidos = await query
                .Include(m => m.Empresa)
                .Include(m => m.Colaborador)
                .Include(m => m.PedidoEstado)
                 .Include(m => m.PedidoPrioridade)
                .Skip((e.Page - 1) * e.PageSize)
                .Take(e.PageSize)
                .ToListAsync();

            NumPedidos = Pedidos.Count; // this is used to tell datagrid how many items are available so that pagination will work
        }

        //($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        // always call StateHasChanged!
        StateHasChanged();
    }

    protected void InativarPedido(int Id)
    {
        PedidoServico.InativarPedido(Id);
        ToastService.ShowSuccess("Pedido inativado com sucesso");
    }

}