@if (Pedido != null)
{
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Validations @ref="Validator" Mode="ValidationMode.Manual" ValidateOnLoad="false" Model="@Pedido">
                <Field>
                    <FieldLabel>Empresa:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation Validator="@ValidarEmpresa">
                                <Select TValue="int" SelectedValue="Pedido.EmpresaId.Value" SelectedValueChanged="@OnSelectedValueChanged" Disabled="@(IsCreating && Pedido.EmpresaId != 0)">
                                    <ChildContent>
                                        <SelectItem Value="0">-</SelectItem>
                                        @if (Empresas != null)
                                            foreach (var e in Empresas)
                                            {
                                                <SelectItem Value="e.Id">@e.Nome</SelectItem>
                                            }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>O Empresa é obrigatória.</ValidationError>
                                    </Feedback>
                                </Select>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @((Pedido.Empresa != null) ? Pedido.Empresa.Nome : "-")
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Colaborador:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation Validator="@ValidarColaborador">
                                <Select @bind-SelectedValue="@Pedido.ColaboradorId" Disabled="@OnColaboradorDisabled()">
                                    <ChildContent>
                                        <SelectItem Value="0">-</SelectItem>
                                        @if (Colaboradores != null)
                                                    foreach (var e in Colaboradores)
                                                    {
                                                <SelectItem Value="e.Id">@e.Nome</SelectItem>
                                                    }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>O Colaborador é obrigatório.</ValidationError>
                                    </Feedback>
                                </Select>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @((Pedido.Colaborador != null) ? Pedido.Colaborador.Nome : "-")
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Assunto:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation>
                                <TextEdit @bind-Text="@Pedido.Assunto" Placeholder="Assunto">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @Pedido.Assunto
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Descrição:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <TextEdit @bind-Text="@Pedido.Descricao" Placeholder="Descrição" />
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @Pedido.Descricao
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Prioridade:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation Validator="@ValidarPedidoPrioridade">
                                <Select @bind-SelectedValue="@Pedido.PedidoPrioridadeId">
                                    <ChildContent>
                                        <SelectItem Value="0">-</SelectItem>
                                        @if (PedidoPrioridade != null)
                                                    foreach (var e in PedidoPrioridade)
                                                    {
                                                <SelectItem Value="e.Id">@e.Nome</SelectItem>
                                                    }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>A Prioridade é obrigatória.</ValidationError>
                                    </Feedback>
                                </Select>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @((Pedido.PedidoPrioridade != null) ? Pedido.PedidoPrioridade.Nome : "-")
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Estado:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation Validator="@ValidarPedidoEstado">
                                <Select @bind-SelectedValue="@Pedido.PedidoEstadoId" Disabled="IsCreating">
                                    <ChildContent>
                                        <SelectItem Value="0">-</SelectItem>
                                        @if (PedidoEstado != null)
                                                    foreach (var e in PedidoEstado)
                                                    {
                                                <SelectItem Value="e.Id">@e.Nome</SelectItem>
                                                    }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>O Estado é obrigatório.</ValidationError>
                                    </Feedback>
                                </Select>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @((Pedido.PedidoEstado != null) ? Pedido.PedidoEstado.Nome : "-")
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Origem:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation Validator="@ValidarPedidoOrigem">
                                <Select @bind-SelectedValue="@Pedido.PedidoOrigemId">
                                    <ChildContent>
                                        <SelectItem Value="0">-</SelectItem>
                                        @if (PedidoOrigem != null)
                                                    foreach (var e in PedidoOrigem)
                                                    {
                                                <SelectItem Value="e.Id">@e.Nome</SelectItem>
                                                    }
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>A Origem é obrigatória.</ValidationError>
                                    </Feedback>
                                </Select>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @((Pedido.PedidoOrigem != null) ? Pedido.PedidoOrigem.Nome : "-")
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Atribuído a:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Select @bind-SelectedValue="@Pedido.UserId">
                                <ChildContent>
                                    <SelectItem Value="0">-</SelectItem>
                                    @if (Utilizadores != null)
                                                foreach (var e in Utilizadores)
                                                {
                                            <SelectItem Value="e.Id">@e.Name</SelectItem>
                                                }
                                </ChildContent>
                            </Select>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @(Utilizadores.Where(m => m.Id == Pedido.UserId).Select(m => m.Name).FirstOrDefault())
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>Data:</FieldLabel>
                    <FieldBody>
                        @if (IsEditing)
                        {
                            <Validation>
                                <DateEdit @bind-Date="@Pedido.Data">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Validation>
                        }
                        else
                        {
                            <Blazorise.Text Class="block">
                                @Pedido.Data
                            </Blazorise.Text>
                        }
                    </FieldBody>
                </Field>
            </Validations>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @if (CanEdit && HasPermissionToEdit)
                if (!IsCreating && !IsEditing)
                {
                    <Button Color="Color.Primary" Clicked="@(()=> IsEditing = true)">Editar</Button>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="OnCreateUpdateClick">Guardar</Button>
                    <Button Color="Color.Light" Clicked="OnCancelClick">Cancelar</Button>
                }
        </Column>
    </Row>
}

@code {
    [Inject]
    public IPedidoServico PedidoServico { get; set; }

    [Inject]
    public IDbContextFactory<AppDatabaseContext> dbContextFactory { get; set; }

    [Inject]
    public IColaboradorServico ColaboradorServico { get; set; }

    [Inject]
    public IEmpresaServico EmpresaServico { get; set; }

    [Inject]
    public IToastService ToastService { get; set; }

    [Inject]
    private IHttpContextAccessor HttpContextAccessor { get; set; }

    [Inject]
    public UserManager<ApplicationUser> UserManager { get; set; }

    [Parameter]
    public EventCallback<int> OnCreateUpdate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public Pedido Pedido { get; set; }

    [Parameter]
    public EventCallback<Pedido> PedidoChanged { get; set; }

    [Parameter]
    public bool IsCreating { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public bool CanEdit { get; set; }

    [Parameter]
    public EventCallback<bool> IsEditingChanged { get; set; }

    Validations Validator;

    List<Empresa> Empresas;

    List<Colaborador> Colaboradores;

    List<PedidoPrioridade> PedidoPrioridade;

    List<PedidoEstado> PedidoEstado;

    List<PedidoOrigem> PedidoOrigem;

    List<ApplicationUser> Utilizadores;

    bool HasPermissionToEdit = true;

    protected override void OnInitialized()
    {
        Utilizadores = UserManager.Users.ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        var userId = HttpContextAccessor.HttpContext.Session.GetString("UserId");

        if (HttpContextAccessor.HttpContext.User.IsInRole("Funcionario"))
            if (Pedido.UserId != userId)
                HasPermissionToEdit = false;

        Empresas = await EmpresaServico.ListarTodas();

        if (Pedido.EmpresaId != 0)
        {
            Colaboradores = await ColaboradorServico.Listar(m => m.EmpresaId == Pedido.EmpresaId);
        }

        // Load de dependencias (listas de valores)
        using var context = dbContextFactory.CreateDbContext();

        PedidoPrioridade = await context.PedidoPrioridade.Where(m => m.Activo == true).ToListAsync();
        PedidoEstado = await context.PedidoEstado.Where(m => m.Activo == true).ToListAsync();
        PedidoOrigem = await context.PedidoOrigem.Where(m => m.Activo == true).ToListAsync();

        if (IsCreating)
        {
            // Forçar estado novo
            var PedidoEstadoNovo = await context.PedidoEstado.FirstOrDefaultAsync(m => m.Codigo == "PEDIDO_ESTADO_NOVO");
            if (PedidoEstadoNovo != null)
                Pedido.PedidoEstadoId = PedidoEstadoNovo.Id;
        }
    }

    protected async Task OnCreateUpdateClick()
    {
        try
        {
            if (Validator.ValidateAll())
            {
                if (Pedido.Id == 0)
                {
                    await PedidoServico.CriarPedido(Pedido, "");
                    ToastService.ShowSuccess("Pedido criado com sucesso");
                }
                else
                {
                    await PedidoServico.EditarPedido(Pedido);
                    ToastService.ShowSuccess("Colaborador alterado com sucesso");
                    IsEditing = false;
                }

                await OnCreateUpdate.InvokeAsync(Pedido.Id);
            }
            else
            {
                ToastService.ShowError($"Não foi possivel criar o Pedido. Dados do formulário inválido.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Não foi possivel criar o Colaborador. Ocorreu um erro: {ex.Message}");
        }
    }

    async Task OnCancelClick()
    {
        if (!IsCreating)
            IsEditing = false;

        await OnCancel.InvokeAsync();
    }

    async Task OnSelectedValueChanged(int Id)
    {
        Pedido.EmpresaId = Id;

        if (Id != 0)
        {
            Colaboradores = await ColaboradorServico.Listar(m => m.EmpresaId == Id);
            if (Colaboradores.Count == 0)
                ToastService.ShowWarning("Esta empresa não tem colaboradores.");
        }
        else
            Colaboradores = new List<Colaborador>();

        StateHasChanged();
    }

    protected bool OnColaboradorDisabled()
    {
        return Pedido.EmpresaId == 0;
    }

    void ValidarEmpresa(ValidatorEventArgs e)
    {
        var id = Convert.ToInt32(e.Value);

        e.Status = (id != 0) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidarColaborador(ValidatorEventArgs e)
    {
        var id = Convert.ToInt32(e.Value);

        e.Status = (id != 0) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidarPedidoPrioridade(ValidatorEventArgs e)
    {
        var id = Convert.ToInt32(e.Value);

        e.Status = (id != 0) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidarPedidoEstado(ValidatorEventArgs e)
    {
        var id = Convert.ToInt32(e.Value);

        e.Status = (id != 0) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidarPedidoOrigem(ValidatorEventArgs e)
    {
        var id = Convert.ToInt32(e.Value);

        e.Status = (id != 0) ? ValidationStatus.Success : ValidationStatus.Error;
    }
}